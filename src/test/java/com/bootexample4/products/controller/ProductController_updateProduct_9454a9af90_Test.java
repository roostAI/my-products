// Test generated by RoostGPT for test Weavr-test using AI Type Open AI and AI Model gpt-4

package com.bootexample4.products.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

import java.util.Optional;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.ResponseEntity;

import com.bootexample4.products.model.Product;
import com.bootexample4.products.repository.ProductRepository;

@ExtendWith(MockitoExtension.class)
public class ProductController_updateProduct_9454a9af90_Test {

    @InjectMocks
    private ProductController productController;

    @Mock
    private ProductRepository productRepository;

    private Product product;

    @BeforeEach
    public void setUp() {
        product = new Product();
        product.setId(1L);
        product.setName("Test Product");
        product.setDescription("Test Product Description");
        product.setPrice(100.00);
    }

    @Test
    public void testUpdateProduct_success() {
        Product updatedProduct = new Product();
        updatedProduct.setId(product.getId());
        updatedProduct.setName("Updated Product");
        updatedProduct.setDescription("Updated Product Description");
        updatedProduct.setPrice(150.00);

        when(productRepository.findById(1L)).thenReturn(Optional.of(product));
        when(productRepository.save(product)).thenReturn(updatedProduct);

        ResponseEntity<Product> response = productController.updateProduct(1L, updatedProduct);

        assertEquals(200, response.getStatusCodeValue());
        assertEquals(updatedProduct, response.getBody());
    }

    @Test
    public void testUpdateProduct_notFound() {
        Product updatedProduct = new Product();
        updatedProduct.setId(2L);
        updatedProduct.setName("Updated Product");
        updatedProduct.setDescription("Updated Product Description");
        updatedProduct.setPrice(150.00);

        when(productRepository.findById(2L)).thenReturn(Optional.empty());

        ResponseEntity<Product> response = productController.updateProduct(2L, updatedProduct);

        assertEquals(404, response.getStatusCodeValue());
    }
}
